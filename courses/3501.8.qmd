---
title: Auxiliar 8
subtitle: Luces y Materiales
author: 
  - Vicente González
  - Julieta Coloma
footer: CC3501 --- Modelación y Computación Gráfica para Ingenieros
from: markdown+emoji
format:
    revealjs:
        theme: night
        pdf-separate-fragments: true
        transition: slide
        chalkboard: true
---
# Contexto

## Modelo de Phong

::: {.incremental}
- Es un modelo de iluminación local.
- No es costoso y es muy paralelizable.
- Usa los conceptos de *Materiales* y *Luces*.
:::

::: {.fragment}
![](./res/phong.png)
:::

## Materiales {auto-animate=true}
::: {.fragment}
Definimos un material como:

$$(\mathcal{K}_a, \mathcal{K}_d, \mathcal{K}_s, \alpha)$$
:::

::: {.incremental}
- $\mathcal{K}_a$ - color ambiental del modelo (sin luz).
- $\mathcal{K}_d$ - color difuso del modelo (con luz).
- $\mathcal{K}_s$ - color especular del modelo (con reflejos).
- $\alpha$ -  brillo o *shininess* del modelo (forma de los reflejos).
:::

## Materiales {auto-animate=true}
::: {.fragment}
### Texturas
:::
::: {.fragment}
Con texturas se suele tener texturas adicionales que guardan los valores
difusos y especulares
:::

::: {.fragment}
:::{.r-stack layout="[[ 1,1 ]]"}

![Difuso](./res/container2.png){height="8cm"}

![Especular](./res/container2_specular.png){height="8cm"}

:::
:::

## Luces {.smaller auto-animate=true}
::: {.fragment}
$$
\mathcal{I} = \frac{\mathcal{K}_a \mathcal{L}_a + \mathcal{K}_d \mathcal{L}_d (l \cdot n) + \mathcal{K}_s \mathcal{L}_s (v \cdot r)^{\alpha} }{k_c + k_l d + k_q d^2}
$$
:::

::: {.incremental}
- $(\mathcal{K}_a, \mathcal{K}_d, \mathcal{K}_s, \alpha)$ --- parámetros del material
- $(\mathcal{L}_a, \mathcal{L}_d, \mathcal{L}_s)$ --- parámetros del color de la luz
- $(k_c, k_l, k_q)$ --- parámetros del atenuación de la luz
- $n$ --- normal de la superficie
- $l$ --- dirección hacia la fuente de luz
- $v$ --- dirección hacia la cámara
- $r$ --- reflexión sobre la superficie
- $d$ --- distancia a la fuente de luz
:::

## Luces {auto-animate=true}
### Direccional
::: {.columns}
::: {.column width=""}
::: {.incremental}
- Representa una luz lejana
- Mantiene la misma dirección
:::
:::
::: {.column width=""}
::: {.fragment}
$$(\mathcal{L}_a, \mathcal{L}_d, \mathcal{L}_s, l)$$
:::
:::
:::

::: {.r-stack}

![](./res/moonknight.gif){height="200"}

:::

## Luces {auto-animate=true}
### Luz puntual
::: {.columns}
::: {.column width=""}
::: {.incremental}
- La luz básica
- Se atenúa con la distancia
:::
:::
::: {.column width=""}
::: {.fragment}
$$(\mathcal{L}_a, \mathcal{L}_d, \mathcal{L}_s, k_c, k_l, k_q)$$
:::
:::
:::

::: {.r-stack}

![](./res/light-human.gif){height="200"}

:::

## Luces {.smaller auto-animate=true}
### Spotlight
::: {.columns}
::: {.column width=""}
::: {.incremental}
- Es como una linterna
- Tiene un foco principal
- Determinado por un $\theta$ y $\theta_{outer}$
:::
:::
::: {.column width=""}
::: {.fragment}
$$(\mathcal{L}_a, \mathcal{L}_d, \mathcal{L}_s, k_c, k_l, k_q, l, \theta, \theta_{outer})$$
:::
:::
:::
::: {.r-stack}
![](./res/pixar.gif){height="200"}
:::

# Problemas

## P2 -- Shading {.smaller}

::: {.fragment}
### Parte A
Cree un nuevo shader donde incluya luces y materiales, para ello puede utilizar 
:::

::: {.fragment}
### Parte B
Cree 3 funciones para calcular el color según cada tipo de fuente de luz.
:::

::: {.fragment}
### Parte C
Añada al shader una función que calcule el color final del pixel según la iluminación de la escena.
:::

## P1 --- En escena {.smaller}
Usando la escena de clase pasada y sus nuevos shaders

::: {.fragment}
### Parte A
Cree 3 bloques nuevos que estén hechos de distintos materiales. 
Añada también un piso de material simple (sin textura).
:::

::: {.fragment}
### Parte B
Cree 2 luces puntuales que roten alrededor de la escena, añada un modelo
para representar la ubicación de estas luces.
:::

::: {.fragment}
### Parte C
Haga un ciclo de dia y noche, para ello cree una luz direccional que se mueva
con el tiempo. Además, cree una linterna para la cámara usando una luz *spotlight* para la noche.

Utilice diversos pipelines para corregir los errores de iluminación.
:::


# Fin
[Ver otras auxiliares](3501.0.qmd){style="font-size:60%"}

